---
import Layout from "../../../../layouts/Layout.astro";
import { KinkCheck } from "../../../../components/KinkCheck";
import RatingOverview from "../../../../components/RatingOverview.astro";
import {
    getCheckRevision,
    getOwnCheck,
    getTemplateRevision,
} from "../../../../backendlib";
import SaveTemplateButton from "../../../../components/SaveTemplateButton";
import { decodeKinkCheck, defaultRatings } from "../../../../base";

const { id, version } = Astro.params;

if (!id || !version) {
    return new Response(`no template ${!id ? "id" : "version"} given`, {
        status: 400,
    });
}

const [template, error] = await getTemplateRevision({ id, version });

if (error) {
    return new Response(error.message, { status: 500 });
}

template.revisions.reverse();

const [check] = await getOwnCheck(Astro, template.id);
const rev = check && getCheckRevision(check, "latest");
---

<Layout
    title={`${template.name} ${template.version}`}
    headertitle={template.name}
>
    <select class="versionselector" slot="header">
        <option value="latest" selected={version === "latest"}>
            latest ({template.revisions[0].version})
        </option>
        <optgroup label="Versions">
            {
                template.revisions.map((rev) => (
                    <option selected={version === rev.version}>
                        {rev.version}
                    </option>
                ))
            }
        </optgroup>
    </select>
    <RatingOverview slot="header" />
    <SaveTemplateButton {...template} slot="header" client:load />
    <main>
        <KinkCheck
            {...template}
            init={rev
                ? decodeKinkCheck(template, rev.data)
                : { ratings: defaultRatings(template.kinks) }}
            client:load
        />
    </main>
</Layout>

<script>
    import { navigate } from "astro:transitions/client";

    document.querySelectorAll("select.versionselector").forEach((el) => {
        el.addEventListener("change", (e) => {
            navigate(`${(e.target as HTMLSelectElement).value}`);
        });
    });
</script>

<style>
    :global(div#content) {
        min-width: 475px;
        max-width: 1800px;
    }
    select {
        margin: auto 0;
    }
</style>
